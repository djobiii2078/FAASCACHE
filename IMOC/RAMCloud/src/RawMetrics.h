/* Copyright (c) 2011 Stanford University
 *
 * Permission to use, copy, modify, and distribute this software for
 * any purpose with or without fee is hereby granted, provided that
 * the above copyright notice and this permission notice appear in all
 * copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR(S) DISCLAIM ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * AUTHORS BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
 * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef RAMCLOUD_RAWMETRICS_H
#define RAMCLOUD_RAWMETRICS_H

#if (__GNUC__ == 4 && __GNUC_MINOR__ >= 5) || (__GNUC__ > 4)
#include <atomic>
#else
#include <cstdatomic>
#endif

#if !DISABLE_METRICS
namespace RAMCloud {
typedef std::atomic_ulong RawMetric;
} // namespace RAMCloud
#else
#include "NoOp.h"
namespace RAMCloud {
typedef RAMCloud::NoOp<uint64_t> RawMetric;
} // namespace RAMCloud
#endif

namespace RAMCloud {

/**
 * This class is used internally by servers to collect performance counters
 * and other useful metrics. Note: this class is now deprecated; better to
 * use PerfStats because it is more efficient.
 */
class RawMetrics {
  public:
    void serialize(std::string& out);
  private:
    void init();
    void sampleOnDemandMetrics();

    /**
     * This structure is used to return information about one metric
     * from the metricInfo method.
     */
    struct MetricInfo {
        /// Hierarchical name for the metric, such as "master.replicas".
        const char* name;

        /// Pointer to the metric's value in this RawMetrics object.
        RawMetric* value;
    };

    /**
     * Return information describing a particular metric. The implementation
     * of this method is in RawMetrics.in.cc; it is generated automatically by
     * scripts/rawmetrics.py.
     *
     * \param i
     *      Index of the desired metric; must be >= 0 and < numMetrics.
     *
     * \return
     *      Information about the given metric.  If i is out of range then
     *      both fields of the return value are NULL.
     */
    MetricInfo metricInfo(int i);
  public:

// This file is automatically generated from scripts/rawmetrics.py; it defines
// all of the individual counters, as well as nested structures containing
// counters.
#include "RawMetrics.in.h"
};

extern RawMetrics* metrics;
} // namespace RAMCloud

#endif // RAMCLOUD_RAWMETRICS_H
