/* Copyright (c) 2013 Stanford University
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR(S) DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

syntax = "proto2";

import "MasterRecoveryInfo.proto";
package RAMCloud.ProtoBuf;

/// Describes the contents of a single entry in a CoordinatorServerList.
/// Used to save information on external storage in order to recover
/// the CoordinatorServerList after a coordinator crash.
message ServerListEntry {
  /// Describes one update to this entry
  message Update {
    /// New status of the server, as of this update.  See ServerStatus enum
    /// for legal values.
    required fixed32 status = 1;

    /// Server list version corresponding to this update.
    required uint64 version = 2;

    /// CoordinatorUpdateManager's sequence number for this update.
    required uint64 sequence_number = 3;
  }

  /// Which services this server is running.
  required fixed32 services = 1;

  /// Unique identifier for the service (contents of a ServerId object).
  required fixed64 server_id = 2;

  /// Locator for the service.
  required string service_locator = 3;

  /// Disk bandwidth of the backup server in MB/s, if this entry represents
  /// a server which is running a backup service.
  required fixed32 expected_read_mbytes_per_sec = 4;

  /// The current status of this server in terms of cluster membership.
  /// See ServerStatus enum in AbstractServerList.h for legal values.
  required fixed32 status = 5;

  /// Identifies the replication group containing this server.
  required fixed64 replication_id = 6;

  /// Information needed for master recovery, which is managed outside
  /// CoordinatorServerList; we store it and recover it without knowing
  /// what it is or exactly how it's used.
  required MasterRecoveryInfo master_recovery_info = 7;

  /// Updates that may not have been received by all of the servers
  /// in the cluster yet. There will always be at least one element
  /// in this list (the most recent update).
  repeated Update update = 8;
}
